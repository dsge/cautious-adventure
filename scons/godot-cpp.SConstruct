import os
import sys
import io
from contextlib import redirect_stdout
import utils

Import('env')
libraryBasePath = '../lib/godot-cpp'

# args = ARGUMENTS
# args["target"] = "editor"
# Export(ARGUMENTS = args) 

env.Decider("content-timestamp")

# with redirect_stdout(io.StringIO()) as f:
    # redirect_stdout is used to capture the stdout, so that the
    # "WARNING: Unknown SCons variables were passed and will be ignored:" messages
    # wouldn't be displayed for someone who uses the app's main sconstruct file
    # SConscript(libraryBasePath + '/SConstruct', exports=opts)
env2 = Environment(tools=["default"], PLATFORM="")
env2["target"] = "editor"
utils.override_build_output_messages(sys, env2)
SConscript(libraryBasePath + '/SConstruct', exports={'env': env2})

builtFileName = libraryBasePath + "/bin/" + "libgodot-cpp.{}.{}.{}{}".format(env["platform"], env2["target"], 'x86_64', '.a')

# Removing builtFileName with `scons -c` also removes the autogenerated object.cpp
env.Clean(builtFileName, os.path.join(libraryBasePath, "gen", "src", "classes", "object.cpp"))

ret = {
    'builds': [
        env.File(builtFileName)
    ], 
    'headerfileIncludePaths': [
        env.Dir(libraryBasePath + '/'),
        env.Dir(libraryBasePath + '/gdextension/'),
        env.Dir(libraryBasePath + '/include/'),
        env.Dir(libraryBasePath + '/include/godot_cpp/'),
        env.Dir(libraryBasePath + '/include/godot_cpp/classes'),
        env.Dir(libraryBasePath + '/include/godot_cpp/core'),
        env.Dir(libraryBasePath + '/include/godot_cpp/variant'),
        env.Dir(libraryBasePath + '/gen/include/'),
        env.Dir(libraryBasePath + '/gen/include/godot_cpp/classes'),
        env.Dir(libraryBasePath + '/gen/include/godot_cpp/variant'),
    ]
}
Return('ret')
